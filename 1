#include <iostream>
#include <string>
#include <vector>

class Plane {
public:
    Plane(int code, std::string location) : code(code), location(location) {}
    int getCode() const { return code; }
    std::string getLocation() const { return location; }

private:
    int code;
    std::string location;
};

class Stat {
private:
    int timer = 0;
    int successfulLandings = 0;
    int successfulTakeoffs = 0;
    int crashes = 0;

public:
    int getTimer() const { return timer; }
    int getSuccessfulLandings() const { return successfulLandings; }
    int getSuccessfulTakeoffs() const { return successfulTakeoffs; }
    int getCrashes() const { return crashes; }

    void IncrementTimer(int interval = 1) {
        timer += interval;
    }

    void IncrementSuccessfulLandings() {
        successfulLandings++;
    }

    void IncrementSuccessfulTakeoffs() {
        successfulTakeoffs++;
    }

    void IncrementCrashes() {
        crashes++;
    }

    void Print() const {
        std::cout << "Time: " << timer << "m" << std::endl;
        std::cout << "Successful Landings: " << successfulLandings << std::endl;
        std::cout << "Successful Takeoffs: " << successfulTakeoffs << std::endl;
        std::cout << "Crashes: " << crashes << std::endl;
    }
};

class PlanesControl {
protected:
    Stat& stat;
    std::vector<Plane*> m_Planes;

public:
    PlanesControl(Stat& rStat) : stat(rStat) {}
};

class AirControl : public PlanesControl {
public:
    AirControl(Stat& rStat) : PlanesControl(rStat) {}

    void Add(Plane* p) {
        if (p) {
            p->getLocation() = "Air";
            m_Planes.push_back(p);
            std::cout << stat.getTimer() << ": #" << p->getCode() << " Ready to take off" << std::endl;
        }
    }

    // Додатковий код для обробки інших подій
};

class GroundControl : public PlanesControl {
public:
    GroundControl(Stat& rStat) : PlanesControl(rStat) {}

    void Add(Plane* p) {
        if (p) {
            p->getLocation() = "Ground";
            m_Planes.push_back(p);
            std::cout << stat.getTimer() << ": #" << p->getCode() << " Ready to land" << std::endl;
        }
    }

    // Додатковий код для обробки інших подій
};

class Airport {
private:
    std::string name;
    Stat& stat;
    AirControl takingoffPlanes;
    GroundControl landingPlanes;

public:
    Airport(std::string _name, Stat& rStat) : name(_name), stat(rStat), takingoffPlanes(rStat), landingPlanes(rStat) {}

    // Додатковий код для обробки інших подій

    void ProcessTick() {
        // Обробка подій в аеропорту
        // Оновлення статистики
    }

    void Print() const {
        // Виведення інформації про аеропорт та статистики
    }
};

int main() {
    Stat stat;
    Airport port("Lviv", stat);

    for (int i = 0; i < 25; i++) {
        // Обробка одного такту роботи моделі
        port.ProcessTick();
        stat.IncrementTimer();
    }

    std::cout << "Final state at " << stat.getTimer() << "m:" << std::endl;
    port.Print();
    stat.Print();

    return 0;
}
