#include <iostream>
#include <string>
#include <vector>

class Plane {
public:
    Plane(int code, std::string location) : code(code), location(location) {}
    int getCode() const { return code; }
    std::string getLocation() const { return location; }

private:
    int code;
    std::string location;
};

class Airport {
public:
    Airport(std::string name) : name(name), m_pOutputPlane(nullptr) {}

    bool Add(int code, std::string location) {
        if (code == 0) {
            std::cout << "Invalid plane code." << std::endl;
            return false;
        }

        if (FindPlaneByCode(code)) {
            std::cout << "#" << code << " already exists in the model." << std::endl;
            return false;
        }

        Plane* plane = new Plane(code, location);

        if (location == "in_air")
            m_pOutputPlane = plane;
        else if (location == "landing")
            landingPlanes.push_back(plane);
        else if (location == "taking_off")
            takingoffPlanes.push_back(plane);
        else {
            std::cout << "Invalid location. Plane not added." << std::endl;
            delete plane;
            return false;
        }

        std::cout << "#" << code << " was added to Airport " << name << " at " << location << std::endl;
        return true;
    }

    bool Remove(int code) {
        Plane* plane = FindPlaneByCode(code);
        if (plane) {
            std::string location = plane->getLocation();
            if (location == "in_air")
                m_pOutputPlane = nullptr;
            else if (location == "landing")
                RemoveFromList(landingPlanes, code);
            else if (location == "taking_off")
                RemoveFromList(takingoffPlanes, code);

            delete plane;
            std::cout << "#" << code << " was removed from Airport " << name << " at " << location << std::endl;
            return true;
        }

        std::cout << "#" << code << " was not found in the model" << std::endl;
        return false;
    }

private:
    std::string name;
    Plane* m_pOutputPlane;
    std::vector<Plane*> landingPlanes;
    std::vector<Plane*> takingoffPlanes;

    Plane* FindPlaneByCode(int code) {
        if (m_pOutputPlane && m_pOutputPlane->getCode() == code)
            return m_pOutputPlane;

        for (Plane* plane : landingPlanes) {
            if (plane->getCode() == code)
                return plane;
        }

        for (Plane* plane : takingoffPlanes) {
            if (plane->getCode() == code)
                return plane;
        }

        return nullptr;
    }

    void RemoveFromList(std::vector<Plane*>& planeList, int code) {
        for (auto it = planeList.begin(); it != planeList.end(); ++it) {
            if ((*it)->getCode() == code) {
                delete* it;
                planeList.erase(it);
                break;
            }
        }
    }
};

int main() {
    Airport airport("MyAirport");

    while (true) {
        std::cout << "Enter a command (Add/Remove/Exit): ";
        std::string command;
        std::cin >> command;

        if (command == "Add") {
            int code;
            std::string location;

            std::cout << "Enter plane code: ";
            std::cin >> code;

            std::cout << "Enter location (in_air/landing/taking_off): ";
            std::cin >> location;

            airport.Add(code, location);
        }
        else if (command == "Remove") {
            int code;

            std::cout << "Enter plane code: ";
            std::cin >> code;

            airport.Remove(code);
        }
        else if (command == "Exit") {
            break;
        }
    }

    return 0;
}
