#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Airport {
    // реалізація класу Airport
public:
    void ProcessTick() {
        // Реалізація обробки кроку моделі
    }
};

typedef void (*ptDlgCommandFunc)(Airport& port);

class DlgCommand {
    string m_sName;
    ptDlgCommandFunc m_pFunc;

public:
    DlgCommand(const char* sName, ptDlgCommandFunc pFunc = nullptr)
        : m_sName(sName), m_pFunc(pFunc) {}

    ~DlgCommand() {}

    const char* GetName() { return m_sName.c_str(); }

    void Run(Airport& port) {
        if (m_pFunc) {
            m_pFunc(port);
        }
    }
};

class DialogManager {
    vector<DlgCommand*> m_aCommands;
    Airport& m_refAirport;

public:
    DialogManager(Airport& port) : m_refAirport(port) {
        m_aCommands.push_back(new DlgCommand("Quit"));
    }

    ~DialogManager() {
        for (DlgCommand* cmd : m_aCommands) {
            delete cmd;
        }
    }

    void RegisterCommand(const char* sName, ptDlgCommandFunc pFunc) {
        m_aCommands.push_back(new DlgCommand(sName, pFunc));
    }

    void Run() {
        int nCommand = 1;
        while (nCommand) {
            cout << endl;
            for (size_t i = 0; i < m_aCommands.size(); i++)
                cout << i << ". " << m_aCommands[i]->GetName() << endl;

            cout << "Enter command: ";
            cin >> nCommand;

            if ((nCommand >= 0) && (nCommand < static_cast<int>(m_aCommands.size()))) {
                m_aCommands[nCommand]->Run(m_refAirport);
            }
            else {
                cout << "Invalid command." << endl;
            }
        }
    }
};

void Process(Airport& port) {
    int nTicks = 0;
    cout << "Input ticks count: ";
    cin >> nTicks;

    for (int i = 0; i < nTicks; i++) {
        port.ProcessTick();
    }
}

int main() {
    Airport airport;  
    DialogManager mgr(airport);

    mgr.RegisterCommand("Process", Process);

    mgr.Run();

    return 0;
}
