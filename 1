#include <iostream>
#include <vector>
#include <string>

class Object {
public:
    Object(int _id, const std::string& _state) : id(_id), state(_state) {}

    int getID() const { return id; }
    std::string getState() const { return state; }

private:
    int id;
    std::string state;
};

class Airport {
    std::string name;
    std::vector<Object> objects;

public:
    Airport(std::string _name) : name(_name) {}

    void AddObject(const Object& obj) {
        objects.push_back(obj);
    }

    const std::vector<Object>& getObjects() const {
        return objects;
    }

    void Print() const {
        std::cout << "Objects in Airport " << name << ":" << std::endl;
        for (const auto& obj : objects) {
            std::cout << "Object ID: " << obj.getID() << std::endl;
            std::cout << "Object State: " << obj.getState() << std::endl;
            std::cout << "------------------------------" << std::endl;
        }
    }
};

void Show(Airport& port) {
    std::cout << "List of objects in the model:" << std::endl;
    const std::vector<Object>& objects = port.getObjects();

    for (const Object& obj : objects) {
        std::cout << "Object ID: " << obj.getID() << std::endl;
        std::cout << "Object State: " << obj.getState() << std::endl;
        std::cout << "------------------------------" << std::endl;
    }
}

int main() {
    Airport airport("LvivAirport");

    // Додаю об'єкти в аеропорт для тестування
    Object obj1(1, "Active");
    Object obj2(2, "Inactive");

    airport.AddObject(obj1);
    airport.AddObject(obj2);

    // ...

    // Зареєструю команду Show з функцією Show
    Show(airport);

    return 0;
}
