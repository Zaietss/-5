#include <iostream>
#include <vector>

class Plane {
    int id;
    int destination;
    bool inAir;

public:
    Plane(int _id, int _destination) : id(_id), destination(_destination), inAir(true) {}

    int getID() const { return id; }
    int getDestination() const { return destination; }
    bool isInAir() const { return inAir; }

    void setAir(bool bInAir) {
        inAir = bInAir;
    }
};

class ControlTower {
    std::vector<Plane*> planes;
    int capacity;

public:
    ControlTower(int _capacity) : capacity(_capacity) {}

    void Add(Plane* p) {
        if (planes.size() < capacity) {
            planes.push_back(p);
        }
        else {
            std::cout << "Control tower is full. Unable to add more planes." << std::endl;
        }
    }

    const std::vector<Plane*>& getPlanes() const {
        return planes;
    }

    void ProcessTick() {
        for (auto it = planes.begin(); it != planes.end(); ) {
            Plane* p = *it;
            if (!p->isInAir()) {
                std::cout << "Plane " << p->getID() << " has landed." << std::endl;
                it = planes.erase(it);
                delete p;
            }
            else {
                ++it;
            }
        }
    }
};

class Airport {
    std::string name;
    ControlTower airControl;
    ControlTower groundControl;

public:
    Airport(std::string _name, int airControlCapacity, int groundControlCapacity)
        : name(_name), airControl(airControlCapacity), groundControl(groundControlCapacity) {}

    ~Airport() {
        for (Plane* p : airControl.getPlanes()) {
            delete p;
        }
        for (Plane* p : groundControl.getPlanes()) {
            delete p;
        }
    }

    void Add(Plane* p, bool bInAir = true) {
        if (p) {
            p->setAir(bInAir);
            if (bInAir) {
                airControl.Add(p);
            }
            else {
                groundControl.Add(p);
            }
        }
    }

    void ProcessTick() {
        airControl.ProcessTick();
        groundControl.ProcessTick();
    }

    void Print() {
        std::cout << "Planes controlled by Airport " << name << ":" << std::endl;
        for (const auto& p : airControl.getPlanes()) {
            std::cout << "Plane " << p->getID() << " (Destination: " << p->getDestination() << ")" << std::endl;
        }
        for (const auto& p : groundControl.getPlanes()) {
            std::cout << "Plane " << p->getID() << " (Destination: " << p->getDestination() << ")" << std::endl;
        }
    }
};

int main() {
    Airport port("Lviv", 10, 10);
    port.Add(new Plane(12, 15));
    port.Add(new Plane(13, 25));
    port.Add(new Plane(14, 15));

    std::cout << "Running:" << std::endl;
    for (int i = 0; i < 25; i++) {
        std::cout << "Time Tick " << i << std::endl;
        port.ProcessTick();
    }

    std::cout << "Final state:" << std::endl;
    port.Print();

    return 0;
}
