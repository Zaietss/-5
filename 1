#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <climits>

class Flight;

class Airport {
public:
    static const int num_airports = 5;  // Визначення глобальної константи
    static std::vector<Airport> airports;  // Визначення глобального вектору аеропортів

    Airport(const std::string& name, int index) : name(name), active(true), index(index) {}

    void close() {
        active = false;
    }

    void reopen() {
        active = true;
    }

    void addFlight(const Flight& flight) {
        flights.push_back(flight);
    }

    void redirectFlights();

    int findNearestAirport();

    std::string name;
    bool active;
    int index;
    std::vector<Flight> flights;
};

class Flight {
public:
    Flight(const std::string& destination) : destination(destination), fuel(100) {
        // Генеруємо випадкове значення для номера аеропорту призначення
        destination_airport = rand() % Airport::num_airports;
    }

    void refuel() {
        fuel = 100;
    }

    std::string destination;
    int destination_airport; // Номер аеропорту призначення
    int fuel;
};

std::vector<Airport> Airport::airports;  // Ініціалізація статичного вектора аеропортів

void Airport::redirectFlights() {
    for (Flight& flight : flights) {
        if (flight.destination_airport == index) {
            // Перенаправити рейс до найближчого активного аеропорту
            int nearestAirport = findNearestAirport();
            flight.destination_airport = nearestAirport;
            airports[nearestAirport].addFlight(flight);
        }
    }
}

int Airport::findNearestAirport() {
    int nearestAirport = -1;
    int minDistance = INT_MAX;

    for (int i = 0; i < num_airports; i++) {
        if (i != index && airports[i].active) {
            // Обчислюємо відстань (замість цього можна використовувати реальний розрахунок відстані)
            int distance = std::abs(index - i);
            if (distance < minDistance) {
                nearestAirport = i;
                minDistance = distance;
            }
        }
    }

    return nearestAirport;
}

int main() {
    // Ініціалізуємо аеропорти
    for (int i = 0; i < Airport::num_airports; i++) {
        Airport::airports.push_back(Airport("Airport" + std::to_string(i), i));
    }

    // Додамо рейси до аеропортів
    for (int i = 0; i < Airport::num_airports; i++) {
        for (int j = 0; j < 5; j++) {
            Flight flight("Airport" + std::to_string(rand() % Airport::num_airports));
            Airport::airports[i].addFlight(flight);
        }
    }

    // Закриваємо перший аеропорт
    Airport::airports[0].close();

    // Перенаправляємо рейси в закритому аеропорту
    for (int i = 1; i < Airport::num_airports; i++) {
        Airport::airports[i].redirectFlights();
    }

    // Виводимо стан аеропортів
    for (const auto& airport : Airport::airports) {
        std::cout << airport.name << " is " << (airport.active ? "open" : "closed") << std::endl;
    }

    return 0;
}
